<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

<!-- 读取数据源文件 -->
	<context:property-placeholder location="classpath:db.properties"/>

<!-- 配置数据源 -->
	<bean id = "dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<!--初始化连接池大小-->
		<property name="initialSize" value="5"></property>
		<!--设置最大连接数-->
		<property name="maxActive" value="10"></property>
		<!--设置等待时间-->
		<property name="maxWait" value="5000"></property>

		<property name="filters" value="stat"></property>
	</bean>

<!-- 配置事务管理器 -->
	<bean id = "transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>

<!-- 配置通知    定义哪些方法被事务管理器进行管理-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
<!-- 			name:与事务相关联的方法名    采用通配符（×）的方式指定某一类方法 -->
<!-- 			REQUIRED：当前方法必须在事物环境中运行，如果没有事物环境，就创建一个事务 -->
<!-- 			SUPPORTS：当前方法如果没有事务环境，就以非事务的方式运行 -->
<!-- 			read-only:当前事务为只读事务，  与read-write相比  执行效率更高   -->
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="insert" propagation="REQUIRED"/>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="edit*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="remove*" propagation="REQUIRED"/>
			<tx:method name="import*" propagation="REQUIRED"/>
			<tx:method name="get*" propagation="SUPPORTS"  read-only="true"/>
			<tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
		
		</tx:attributes>
	</tx:advice>

<!-- 配置切面 -->
	<aop:config>
<!-- 	第一个*:返回值        第二*:com.service及其子包下的所有类      第三个*:所有方法    (..):所有参数 -->
		<aop:advisor advice-ref="txAdvice" pointcut ="execution(* com.service.*.*(..))"/>
	</aop:config>
	
	
	
	
<!-- 配置mybatis的工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
<!-- 		配置数据源 -->
		<property name="dataSource" ref="dataSource"/>
<!-- 		配置mybatis的配置文件路径 -->
		<property name="configLocation" value="classpath:mybatis.xml"></property>
		<property name="mapperLocations">
			<list>
				<value>classpath:mapper/*.xml</value>
			</list>
		</property>
	</bean>

<!-- 	mapper接口开发，扫描mapper包 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>


<!-- 配置扫描@service注解 -->
	<context:component-scan base-package="com.service"/>


</beans>