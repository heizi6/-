<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.model.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="sex" jdbcType="INTEGER" property="sex" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="role" jdbcType="INTEGER" property="role" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="number" jdbcType="INTEGER" property="number" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="phone" jdbcType="BIGINT" property="phone" />
    <result column="birthday" jdbcType="VARCHAR" property="birthday" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="working" jdbcType="INTEGER" property="working" />
    <result column="work" jdbcType="VARCHAR" property="work" />
    <result column="classes" jdbcType="VARCHAR" property="classes" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, username, password, sex, email, role, status, number, address, phone, birthday, 
    description, working, work, classes
  </sql>

  <select id="selectByExample" parameterType="com.model.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.model.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.model.User">
    insert into user (id, username, password, 
      sex, email, role, status, 
      number, address, phone, 
      birthday, description, working, 
      work, classes)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{sex,jdbcType=INTEGER}, #{email,jdbcType=VARCHAR}, #{role,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, 
      #{number,jdbcType=INTEGER}, #{address,jdbcType=VARCHAR}, #{phone,jdbcType=BIGINT}, 
      #{birthday,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, #{working,jdbcType=INTEGER}, 
      #{work,jdbcType=VARCHAR}, #{classes,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.model.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="role != null">
        role,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="number != null">
        number,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="working != null">
        working,
      </if>
      <if test="work != null">
        work,
      </if>
      <if test="classes != null">
        classes,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        #{role,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="number != null">
        #{number,jdbcType=INTEGER},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=BIGINT},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="working != null">
        #{working,jdbcType=INTEGER},
      </if>
      <if test="work != null">
        #{work,jdbcType=VARCHAR},
      </if>
      <if test="classes != null">
        #{classes,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.model.UserExample" resultType="java.lang.Long">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=INTEGER},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.role != null">
        role = #{record.role,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.number != null">
        number = #{record.number,jdbcType=INTEGER},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.phone != null">
        phone = #{record.phone,jdbcType=BIGINT},
      </if>
      <if test="record.birthday != null">
        birthday = #{record.birthday,jdbcType=VARCHAR},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.working != null">
        working = #{record.working,jdbcType=INTEGER},
      </if>
      <if test="record.work != null">
        work = #{record.work,jdbcType=VARCHAR},
      </if>
      <if test="record.classes != null">
        classes = #{record.classes,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set id = #{record.id,jdbcType=INTEGER},
      username = #{record.username,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=INTEGER},
      email = #{record.email,jdbcType=VARCHAR},
      role = #{record.role,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      number = #{record.number,jdbcType=INTEGER},
      address = #{record.address,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=BIGINT},
      birthday = #{record.birthday,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=VARCHAR},
      working = #{record.working,jdbcType=INTEGER},
      work = #{record.work,jdbcType=VARCHAR},
      classes = #{record.classes,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.model.User">
    update user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        role = #{role,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="number != null">
        number = #{number,jdbcType=INTEGER},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=BIGINT},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="working != null">
        working = #{working,jdbcType=INTEGER},
      </if>
      <if test="work != null">
        work = #{work,jdbcType=VARCHAR},
      </if>
      <if test="classes != null">
        classes = #{classes,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.model.User">
    update user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=INTEGER},
      email = #{email,jdbcType=VARCHAR},
      role = #{role,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      number = #{number,jdbcType=INTEGER},
      address = #{address,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=BIGINT},
      birthday = #{birthday,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      working = #{working,jdbcType=INTEGER},
      work = #{work,jdbcType=VARCHAR},
      classes = #{classes,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getAddress" resultType="com.model.BaseEntity">
      select address as name,count(1) as value from user where role= 3 and address is not null GROUP BY address
    </select>
  <select id="getWork" resultType="com.model.BaseEntity">
      select work as name,count(1) as value from user where role= 3 and work is not null GROUP BY work
    </select>
  <select id="getWorking" resultType="com.model.BaseEntity">
     select  (case
when working=0 then '未工作'
when working=1 then '已工作'
end)as name, count(1) as value
 from user where role = 3 and working is not null group by working
    </select>
  <select id="getWorkingWithClasses" resultType="com.model.BaseEntity">
     select  (case
when working=0 then '未工作'
when working=1 then '已工作'
end) as name, count(1) as value
 from user where role = 3 and working is not null and classes = #{classes,jdbcType=VARCHAR} group by working
 </select>

  <select id="getAddressWithClasses" resultType="com.model.BaseEntity">
      select address as name,count(1) as value from user where role= 3 and classes=#{classes} and address is not null GROUP BY address
    </select>

  <select id="getWorkWithClasses" resultType="com.model.BaseEntity">
      select work as name,count(1) as value from user where role = 3 and classes = #{classes} and work is not null GROUP BY work
    </select>
</mapper>